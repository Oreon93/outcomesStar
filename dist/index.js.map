{"version":3,"file":"index.js","sources":["../src/components/StarShape.tsx","../src/components/ConcentricRings.tsx","../src/components/DataLines.tsx","../src/components/CategoryLabels.tsx","../src/components/Legend.tsx","../src/components/StarDiagram.tsx","../src/components/TestComponent.tsx"],"sourcesContent":["import React from 'react';\nimport { StarShapeProps } from '../types';\n\nexport const StarShape: React.FC<StarShapeProps> = ({\n  centerX,\n  centerY,\n  outerRadius,\n  innerRadius,\n  pointCount,\n  fill = \"#b8e6b8\",\n  stroke = \"#4a5568\",\n  strokeWidth = 2\n}) => {\n  const calculateStarPoints = (\n    centerX: number,\n    centerY: number,\n    outerRadius: number,\n    innerRadius: number,\n    points: number\n  ): number[][] => {\n    const angleStep = (Math.PI * 2) / points;\n    const coords = [];\n\n    for (let i = 0; i < points; i++) {\n      // Outer point (peak)\n      const outerAngle = i * angleStep - Math.PI / 2;\n      coords.push([\n        centerX + Math.cos(outerAngle) * outerRadius,\n        centerY + Math.sin(outerAngle) * outerRadius\n      ]);\n\n      // Inner point (valley)\n      const innerAngle = (i + 0.5) * angleStep - Math.PI / 2;\n      coords.push([\n        centerX + Math.cos(innerAngle) * innerRadius,\n        centerY + Math.sin(innerAngle) * innerRadius\n      ]);\n    }\n\n    return coords;\n  };\n\n  const starPoints = calculateStarPoints(centerX, centerY, outerRadius, innerRadius, pointCount);\n  const pathString = starPoints.map((point, i) =>\n    `${i === 0 ? 'M' : 'L'} ${point[0]} ${point[1]}`\n  ).join(' ') + ' Z';\n\n  return (\n    <path\n      d={pathString}\n      fill={fill}\n      stroke={stroke}\n      strokeWidth={strokeWidth}\n    />\n  );\n};","import React from 'react';\nimport { ConcentricRingsProps } from '../types';\n\nexport const ConcentricRings: React.FC<ConcentricRingsProps> = ({\n  centerX,\n  centerY,\n  outerRadius,\n  pointCount,\n  ringCount = 10,\n  strokeColor = \"#d1d5db\",\n  maxScore = 10\n}) => {\n  return (\n    <>\n      {Array.from({ length: ringCount }, (_, index) => index + 1).map(ringNumber => {\n        const radius = ((ringNumber + 1) / (maxScore + 1)) * outerRadius;\n        return (\n          <React.Fragment key={ringNumber}>\n            {/* Ring circle */}\n            <circle\n              cx={centerX}\n              cy={centerY}\n              r={radius}\n              fill=\"none\"\n              stroke={strokeColor}\n              strokeWidth=\"1\"\n            />\n            {/* Numbers on each of the star branches */}\n            {Array.from({ length: pointCount }).map((_, branchIndex) => {\n              const angle = (branchIndex * Math.PI * 2 / pointCount) - Math.PI / 2;\n              const textX = centerX + Math.cos(angle) * radius;\n              const textY = centerY + Math.sin(angle) * radius;\n\n              return (\n                <g key={`${ringNumber}-${branchIndex}`}>\n                  {/* White circle background for number */}\n                  <circle\n                    cx={textX}\n                    cy={textY}\n                    r=\"10\"\n                    fill=\"white\"\n                    stroke={strokeColor}\n                    strokeWidth=\"1\"\n                  />\n                  {/* Number text */}\n                  <text\n                    x={textX}\n                    y={textY + 3}\n                    textAnchor=\"middle\"\n                    fontSize=\"10\"\n                    fill=\"#374151\"\n                    fontWeight=\"500\"\n                  >\n                    {ringNumber}\n                  </text>\n                </g>\n              );\n            })}\n          </React.Fragment>\n        );\n      })}\n      \n      {/* Center blank circle */}\n      <circle\n        cx={centerX}\n        cy={centerY}\n        r={outerRadius / (maxScore + 1)}\n        fill=\"white\"\n        stroke={strokeColor}\n        strokeWidth=\"2\"\n      />\n    </>\n  );\n};","import React from 'react';\nimport { DataLinesProps } from '../types';\n\nexport const DataLines: React.FC<DataLinesProps> = ({\n  centerX,\n  centerY,\n  outerRadius,\n  firstScores,\n  latestScores,\n  colors,\n  maxScore = 10\n}) => {\n  const scoreToCoordinates = (scores: { category: string, score: number }[]) => {\n    return scores.map((item, index) => {\n      const angle = (index * Math.PI * 2 / scores.length) - Math.PI / 2;\n      const radius = ((item.score + 1) / (maxScore + 1)) * outerRadius;\n      return [\n        centerX + Math.cos(angle) * radius,\n        centerY + Math.sin(angle) * radius\n      ];\n    });\n  };\n\n  const firstCoords = scoreToCoordinates(firstScores);\n  const latestCoords = scoreToCoordinates(latestScores);\n\n  const firstPathString = firstCoords.map((point, i) =>\n    `${i === 0 ? 'M' : 'L'} ${point[0]} ${point[1]}`\n  ).join(' ') + ' Z';\n\n  const latestPathString = latestCoords.map((point, i) =>\n    `${i === 0 ? 'M' : 'L'} ${point[0]} ${point[1]}`\n  ).join(' ') + ' Z';\n\n  return (\n    <>\n      {/* First score line */}\n      <path\n        d={firstPathString}\n        fill=\"none\"\n        stroke={colors.first}\n        strokeWidth=\"2\"\n      />\n      \n      {/* First score dots */}\n      {firstCoords.map((coord, index) => (\n        <circle\n          key={`first-${index}`}\n          cx={coord[0]}\n          cy={coord[1]}\n          r=\"4\"\n          fill={colors.first}\n        />\n      ))}\n      \n      {/* Latest score line */}\n      <path\n        d={latestPathString}\n        fill=\"none\"\n        stroke={colors.latest}\n        strokeWidth=\"2\"\n      />\n      \n      {/* Latest score dots */}\n      {latestCoords.map((coord, index) => (\n        <circle\n          key={`latest-${index}`}\n          cx={coord[0]}\n          cy={coord[1]}\n          r=\"4\"\n          fill={colors.latest}\n        />\n      ))}\n    </>\n  );\n};","import React from 'react';\nimport { CategoryLabelsProps } from '../types';\n\nexport const CategoryLabels: React.FC<CategoryLabelsProps> = ({\n  centerX,\n  centerY,\n  outerRadius,\n  categories,\n  fontSize = 11,\n  textColor = \"#374151\"\n}) => {\n  return (\n    <>\n      {categories.map((label, index) => {\n        const angle = (index * Math.PI * 2 / categories.length) - Math.PI / 2;\n        const labelRadius = outerRadius + 40; // Increased distance from star\n        const textX = centerX + Math.cos(angle) * labelRadius;\n        const textY = centerY + Math.sin(angle) * labelRadius;\n\n        // Split long labels into multiple lines\n        const words = label.split(' ');\n        const lines = [];\n        let currentLine = '';\n        \n        words.forEach(word => {\n          if (currentLine.length + word.length + 1 <= 15) { // Max 15 characters per line\n            currentLine += (currentLine ? ' ' : '') + word;\n          } else {\n            if (currentLine) lines.push(currentLine);\n            currentLine = word;\n          }\n        });\n        if (currentLine) lines.push(currentLine);\n\n        return (\n          <g key={`label-${index}`}>\n            {lines.map((line, lineIndex) => (\n              <text\n                key={`${index}-${lineIndex}`}\n                x={textX}\n                y={textY + (lineIndex - (lines.length - 1) / 2) * 12} // Center multi-line text\n                textAnchor=\"middle\"\n                dominantBaseline=\"middle\"\n                fontSize={fontSize}\n                fill={textColor}\n                fontWeight=\"500\"\n              >\n                {line}\n              </text>\n            ))}\n          </g>\n        );\n      })}\n    </>\n  );\n};","import React from 'react';\nimport { LegendProps } from '../types';\n\nexport const Legend: React.FC<LegendProps> = ({\n  centerX,\n  y,\n  labels,\n  colors\n}) => {\n  return (\n    <g transform={`translate(${centerX - 100}, ${y})`}>\n      {/* First Star legend item */}\n      <circle cx=\"0\" cy=\"0\" r=\"5\" fill={colors.first} />\n      <text x=\"15\" y=\"0\" dominantBaseline=\"middle\" fontSize=\"12\" fill=\"#374151\">\n        {labels.first}\n      </text>\n      \n      {/* Second Star legend item */}\n      <circle cx=\"165\" cy=\"0\" r=\"5\" fill={colors.latest} />\n      <text x=\"180\" y=\"0\" dominantBaseline=\"middle\" fontSize=\"12\" fill=\"#374151\">\n        {labels.latest}\n      </text>\n    </g>\n  );\n};","// StarDiagram.tsx\nimport React from 'react';\nimport { StarDiagramProps } from '../types';\nimport { StarShape } from './StarShape';\nimport { ConcentricRings } from './ConcentricRings';\nimport { DataLines } from './DataLines';\nimport { CategoryLabels } from './CategoryLabels';\nimport { Legend } from './Legend';\n\nexport const StarDiagram: React.FC<StarDiagramProps> = ({\n  firstScores,\n  latestScores,\n  width = 600,\n  height = 700,\n  colors = {\n    first: \"#f97316\",\n    latest: \"#22c55e\",\n    star: \"#b8e6b8\",\n    rings: \"#d1d5db\"\n  },\n  labels = {\n    first: \"First Dataset\",\n    latest: \"Latest Dataset\"\n  },\n  maxScore = 10\n}) => {\n  // Validation\n  if (firstScores.length !== latestScores.length) {\n    throw new Error('First and latest scores must have the same number of categories');\n  }\n\n  if (firstScores.length < 3) {\n    throw new Error('Star diagram requires at least 3 categories');\n  }\n\n  const pointCount = firstScores.length;\n  const centerX = width / 2;\n  const centerY = (height - 120) / 2 + 60; // Account for legend space + top padding for labels\n  const outerRadius = Math.min(width - 120, height - 200) * 0.5; // Reduced size to leave room for labels\n  const innerRadius = outerRadius * 0.5;\n\n  const categories = firstScores.map(item => item.category);\n\n  return (\n    <div style={{\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: '100%',\n      height: '100%',\n      backgroundColor: '#f9fafb'\n    }}>\n      <div style={{ \n        width: \"100%\", \n        height: \"100%\", \n        textAlign: 'center'\n      }}>\n        <svg \n          width=\"100%\" \n          height=\"100%\" \n          viewBox={`0 0 ${width} ${height}`}\n          style={{\n            border: '1px solid #e5e7eb',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n            backgroundColor: 'white',\n            maxWidth: `${width}px`,\n            maxHeight: `${height}px`\n          }}\n        >\n          <StarShape\n            centerX={centerX}\n            centerY={centerY}\n            outerRadius={outerRadius}\n            innerRadius={innerRadius}\n            pointCount={pointCount}\n            fill={colors.star}\n          />\n          \n          <ConcentricRings\n            centerX={centerX}\n            centerY={centerY}\n            outerRadius={outerRadius}\n            pointCount={pointCount}\n            ringCount={maxScore}\n            strokeColor={colors.rings}\n            maxScore={maxScore}\n          />\n          \n          <DataLines\n            centerX={centerX}\n            centerY={centerY}\n            outerRadius={outerRadius}\n            firstScores={firstScores}\n            latestScores={latestScores}\n            colors={{\n              first: colors.first,\n              latest: colors.latest\n            }}\n            maxScore={maxScore}\n          />\n          \n          <CategoryLabels\n            centerX={centerX}\n            centerY={centerY}\n            outerRadius={outerRadius}\n            categories={categories}\n          />\n          \n          <Legend\n            centerX={centerX}\n            y={height - 30}\n            labels={labels}\n            colors={{\n              first: colors.first,\n              latest: colors.latest\n            }}\n          />\n        </svg>\n      </div>\n    </div>\n  );\n};","import React from 'react';\n\nexport const TestComponent = () => {\n  return React.createElement('div', null, 'Hello World');\n};"],"names":["_jsx","_jsxs","_Fragment"],"mappings":"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"}